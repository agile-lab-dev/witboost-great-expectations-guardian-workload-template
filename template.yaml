apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: gx-guardian-workload-template.0
  title: Great Expectations Guardian Workload Template
  description: Allows to monitor Data Contracts
  tags:
    - workload
    - gx
    - guardian
spec:
  generates: componenttype:default/workload
  owner: agilelab
  type: workload
  parameters:
    - title: Component metadata
      description: Basic information for this component.
      required:
        - name
        - description
        - domain
        - dataproduct
        - identifier
        - developmentGroup
      properties:
        name:
          title: Name
          type: string
          description: Required. The name of the component.
          ui:field: EntityNamePicker
          default: Guardian Workload
          ui:options:
            allowArbitraryValues: true
        description:
          title: Description
          type: string
          description: Help others understand what this Workload is for
          default: Workload to monitor Data Contracts
        domain:
          title: Domain
          type: string
          description: Required. Domain of the Data Product this component belongs to.
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Required. Data Product this component belongs to.
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: Autogenerated from the information above. A unique identifier for the component. It will not be editable after creation and is a string composed of [a-zA-Z] separated by any of [-_].
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: Development Group
          type: string
          description: Automatically selected from the Data Product metadata. Data Product development group.
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Dependencies
          type: array
          description: A component could depend on other components in the same Data Product. This information will be used to deploy the components in such an order that their dependencies already exist.
          default: []
          items:
            type: string
            ui:field: EntityRelationsPicker
            ui:fieldName: dataproduct
            relation: hasPart
        readsFrom:
          title: Reads from
          type: array
          default: []
          items:
            type: string
            ui:field: ReadsFromPicker
          description: This is filled only for DataPipeline workloads and it represents the list of output ports or external systems that is reading
        tags:
          title: Tags
          type: array
          description: Tags for the component.
          default: []
          items:
            type: string
        domainName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: domain
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden
        dataproductName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden

    - title: Data Contract selection
      description: Select the Data Contracts to monitor
      required:
        - dataContracts      
      properties:
        dataContracts:
          title: Data Contracts
          description: Choose Data Contracts
          ui:field: EntitySearchPicker
          ui:options:
            multiSelection: true
            entities:
              - type: DataContract
                returnField: urn
                filter:
                  system: '{{dataproduct}}'
                userFilters:
                  - search
                  - system

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: .
        values:
          name: '${{ parameters.name }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          dependsOn: '${{ parameters.dependsOn }}'
          readsFrom: '${{ parameters.readsFrom }}'
          tags: '${{ parameters.tags }}'
          domainName: '${{ parameters.domainName }}'
          dataproductName: '${{ parameters.dataproductName }}'
          dataContracts: '${{ parameters.dataContracts }}'
          useCaseTemplateId: urn:dmb:utm:gx-guardian-workload-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:gx-guardian-tech-adapter:0
          useCaseTemplateVersion: 0.0.0
          destination: &destination 'gitlab.com?owner=AgileDMBSandbox%2F${{orgname}}%2Fmesh.repository%2F${{ parameters.domain | replace(r/domain:| |-/, "") }}%2F${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}&repo=${{ parameters.name.split(" ") | join("") | lower }}'

    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: *destination
        rootDirectory: '${{ parameters.rootDirectory }}'
        dataproduct: '${{ parameters.dataproduct }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
